1,const
	const char *p; 		//字符内容不可改，指针可改
	char * const p; 	//字符内容可以改，指针不能改
	const 在类型名前后效果一样：const char * 与 char const * 等价

2,fprintf(stderr, "%s", argv[0])
	fprintf(stderr, …) = 带格式地把错误提示写到标准错误。

3,strcpy(原来的字符串,要复制的字符串);

4,strcat(原来的字符串,在原来的字符串后面追加的字符串);
	strcat不会清空原来的字符串

5,perror(""):根据最近一次的错误的errno，输出错误信息+""

6,fputc 

	┌─────────────┐
	│ 你的代码     │  调用 fputc()
	└───────┬─────┘
		▼
	┌─────────────┐
	│ 用户态缓冲区 │ ← stdio (fwrite/fputc) 管的内存
	└───────┬─────┘
		│  满了 / fflush / 关闭文件 时
		▼
	┌─────────────┐
	│   内核页缓存 │ ← 1 次 write() 进入内核
	└───────┬─────┘
		│  落盘时机由内核后台线程决定
		▼
	┌─────────────┐
	│  物理磁盘    │
	└─────────────┘


7,  void *memcpy(void *dest, const void *src, size_t n);
    

	从内存src复制到dest，desc和src不能有重叠的部分
	若有重叠部分，用memmove函数
		void *memmove(void *dest, const void *src, size_t n);
	用途：
			#1 拷贝结构体数组

	    	#2 复制 socket 数据、二进制数据流

			#3 写驱动、系统编程时传递数据缓冲区	


	:)strcpy 专门为 “拷贝到遇 \0” 设计；

	:)memcpy 是 “搬 n 字节，不管内容”；

	:)要重叠就找 memmove。

8，标准输出stdout
	#1 标准输出 stdout 输出到终端是行缓冲的，putchar() 等函数不会立即输出到屏幕除非：
		（1）缓冲区满
		（2）遇到换行符 \n
		（3）显式调用 fflush(stdout);
		还有如下函数类似：printf()	fprintf()	
	#2 标准输出 stdout 输出到文件/管道是全缓冲，只有当
		（1）缓冲区满了
		（2）显式调用 fflush(stdout);
		（3）程序退出时，exit() 或 close() 会触发缓冲区刷新

9，sprintf 
		就是：像 printf 一样格式化内容，但不是打印到屏幕，而是写到字符串中。
	  	char buffer[100];
    	int age = 25;
   		sprintf(buffer, "I am %d years old.", age);
    	printf("buffer = %s\n", buffer);  // 输出：I am 25 years old.

10. 函数指针

	函数指针的定义语法：
		返回值类型 (*函数指针变量)(参数类型列表);

	例：
		void (*myfun)(int, int);
			→ 定义一个函数指针变量 myfun，指向一个返回 void、参数为 int, int 的函数。

	typedef 的用法：
		typedef void (*myfun)(int, int);
			→ 给函数指针类型 void (*)(int, int) 起别名为 myfun。
			→ 此后可以这样定义函数指针变量：
				myfun fun1;
				myfun fun2;

	假设有函数：
		void test(int a, int b) { /*...*/ }

	赋值与调用：
		fun1 = test;
		fun1(10, 20);           // 等价于 (*fun1)(10, 20);
								// 注意：函数名本身就是函数指针，它会自动转换为函数地址
